import {CONSTANTS} from "../constants.mjs";
import {AbstractAssignAffinityStep} from "./abstract-assign-affinity-step.mjs";

const allDamageTypes = Object.keys(CONSTANTS.damageTypes)

const vulnerabilitiesKey = "vulnerabilities";

export class AssignVulnerabilityStep extends AbstractAssignAffinityStep {

    static get stepName() {
        return "QUICKNPC.step.assignAffinity.vulnerability"
    }

    static getOptions(model, context) {
        const validAffinities = ["", "res"]
        return context[vulnerabilitiesKey][0].filter(damageType => validAffinities.includes(model.affinities[damageType]))
    }

    /**
     * @param context
     * @param {DamageType[]} options
     */
    static addVulnerability(context, options = allDamageTypes) {
        options = options.filter(value => allDamageTypes.includes(value))
        context[vulnerabilitiesKey] ??= [];
        context[vulnerabilitiesKey].push(options)
    }

    static shouldActivate(current, value, context) {
        return context[vulnerabilitiesKey]?.length;
    }


    doApply(value, context) {
        const affinity = value.affinities[this.damageType];
        if (["vul", "imm", "abs"].includes(affinity)) {
            return false
        } else {
            if (affinity === "res") {
                value.affinities[this.damageType] = ""
            } else {
                value.affinities[this.damageType] = "vul"
            }
            context[vulnerabilitiesKey].shift();
            return value;
        }
    }
}